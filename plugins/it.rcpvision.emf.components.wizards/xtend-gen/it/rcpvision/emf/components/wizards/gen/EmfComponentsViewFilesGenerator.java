package it.rcpvision.emf.components.wizards.gen;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class EmfComponentsViewFilesGenerator {
  public CharSequence generateTreeFormView(final String projectName, final String simpleName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(projectName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import it.rcpvision.emf.components.views.AbstractSaveableResourceTreeFormView;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.URI;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(simpleName, "");
    _builder.append("TreeFormView extends AbstractSaveableResourceTreeFormView {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected URI createResourceURI() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ContentsURILoader.getResourceUri();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTableView(final String projectName, final String simpleName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(projectName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import it.rcpvision.emf.components.views.AbstractSaveableResourceTableView;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.command.Command;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.URI;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Composite;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.EcoreUtil2;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(simpleName, "");
    _builder.append("TableView extends AbstractSaveableResourceTableView {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//TODO the EObject must be the implemented type container");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private EObject container;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected Object getContents(Resource resource) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//TODO the EObject must be the implemented type container");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("container = (EObject) resource.getContents().get(0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//TODO the EObject must be the implemented type contained");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return EcoreUtil2.getAllContentsOfType(container, EObject.class);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected EClass getEClass() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//TODO the implemented Literal");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected URI createResourceURI() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ContentsURILoader.getResourceUri();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createPartControl(Composite parent) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.createPartControl(parent);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//TODO create implementation");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void customizePostCommandStackChanged(Command mostRecentCommand) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//TODO the EObject must be the implemented type contained");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tableViewer.setInput(EcoreUtil2.getAllContentsOfType(container, EObject.class));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tableViewer.refresh();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateContentsURILoader(final String projectName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(projectName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.URI;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ContentsURILoader {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static URI getResourceUri() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//TODO needs to be implemented");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
