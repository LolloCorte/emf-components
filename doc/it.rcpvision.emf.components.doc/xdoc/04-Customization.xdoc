chapter:Customization[Customization]

section:ResourceManagers[Managing Resources]

section2:ResourceSaveManager[Resource Save Manager]

Resource saving is delegated to codeRef[it.rcpvision.emf.components.edit.ResourceSaveManager]
which, by defaults only saves the passed codeRef[org.eclipse.emf.ecore.resource.Resource].
You can inject your own save manager and implement the method code[precondition(Resource)], for
instance, you may want to validate the resource before saving, and in case the validation
fails to return code[false].  If the precondition is code[false] the default implementation
will not save the resource (and in turn will return code[false]).

section3:ValidateResourceSaveManager[Validate Resource Save Manager]

We provide an example of custom resource save manager: codeRef[it.rcpvision.emf.components.edit.ValidateResourceSaveManager],
we show here only relevant parts to give an example:

code[Java][
public class ValidateResourceSaveManager extends ResourceSaveManager {

	@Override
	protected boolean precondition(Resource resource) {
		return super.precondition(resource) && validateModel(resource);
	}

	protected boolean validateModel(Resource resource) {
		for (EObject eObject : resource.getContents()) {
			Diagnostic diagnostic = Diagnostician.INSTANCE.validate(eObject);
			if (diagnostic.getSeverity() == Diagnostic.ERROR) {
				// SKIPPED: present the errors
				return false;
			} else if (diagnostic.getSeverity() == Diagnostic.WARNING) {
				// SKIPPED: present the warnings
			}
		}
		return true;
	}
}
]

section2:EditingDomainFinder[Editing Domain Finder]

codeRef[it.rcpvision.emf.components.edit.EditingDomainFinder]

section2:EmptyResourceInitializer[Empty Resource Initializer]

codeRef[it.rcpvision.emf.components.resource.EmptyResourceInitializer]

section2:EditingDomainResourceLoader[Editing Domain Resource Loader]

ul[
	item[ref:ResourceLoader[ResourceLoader]
	ul[
		item[ref:EmptyResourceInitializer[EmptyResourceInitializer]]
	]]
	item[ref:EmptyResourceInitializer[EmptyResourceInitializer]]
	item[ref:FeaturesProvider[FeaturesProvider]]
]

section2:ResourceLoader[Resource Loader]

ul[
	item[ref:EmptyResourceInitializer[EmptyResourceInitializer]]
]

section:Providers[Providers]

section2:FeaturesProvider[Features Provider]

When the framework builds components according to the
codeRef[org.eclipse.emf.ecore.EStructuralFeature]s of a given
codeRef[org.eclipse.emf.ecore.EClass] it relies on an injected
codeRef[it.rcpvision.emf.components.ui.provider.FeaturesProvider].
The default behavior is to simply return all the features of the a given EClass,
in the order they are defined in the EClass;
you may want to provide a custom implementation by redefining
the method code[List<EStructuralFeature> getFeatures(EClass)], or
code[List<EStructuralFeature> getFeatures(EObject)],
for instance by returning the features ordered according to their name
(the following snippet uses an utility class from the framework)

code[Java][
public class OrderedEStructuralFeaturesProvider 
	extends FeaturesProvider {

	@Inject
	EStructuralFeatureNameComparator comparator;
	
	@Override
	public List<EStructuralFeature> getFeatures(EClass eClass) {
		List<EStructuralFeature> features = super.getFeatures(eClass);
		Collections.sort(features, 
			new EStructuralFeatureNameComparator());
		return features;
	}
}
]

Alternatively, you can set the mappings, i.e., specify the structural
features you want to be used given an EClass, by implementing
the method code[buildMap], which receives the
codeRef[it.rcpvision.emf.components.ui.provider.FeaturesProvider$EClassToEStructuralFeatureMap]
that can be filled with the method code[mapTo]; 
for instance, using the EMF extended library
example, this customization will return only the e[name] and e[address] features
for code[Library], the e[firstName], e[lastName] and e[address] for
code[Person], and the e[firstName], e[lastName] and e[books] (but
not e[address]) for code[Writer] (which inherits from code[Person]).

code[Java][
import static org.eclipse.emf.examples.extlibrary.EXTLibraryPackage.Literals.*;
import it.rcpvision.emf.components.ui.provider.EStructuralFeaturesProvider;

public class LibraryEStructuralFeaturesProvider extends
		FeaturesProvider {

	@Override
	protected void buildMap(EClassToEStructuralFeatureMap map) {
		super.buildMap(map);
		map.mapTo(LIBRARY,
				LIBRARY__NAME, ADDRESSABLE__ADDRESS);
		map.mapTo(PERSON,
				PERSON__FIRST_NAME, PERSON__LAST_NAME,
				ADDRESSABLE__ADDRESS);
		map.mapTo(WRITER,
				PERSON__FIRST_NAME, PERSON__LAST_NAME,
				WRITER__BOOKS);
	}
}
]

Another possibility is to build a map which relies on Strings
both for the codeRef[org.eclipse.emf.ecore.EClass] and for
the list of codeRef[org.eclipse.emf.ecore.EStructuralFeature];
note that the name of the codeRef[org.eclipse.emf.ecore.EClass] should
be obtained by using code[getInstanceClassName()]; you can also
combine the two approaches (in that case the map built with
code[buildMap] has the precedence):

code[Java][
import static org.eclipse.emf.examples.extlibrary.EXTLibraryPackage.Literals.*;
import it.rcpvision.emf.components.ui.provider.FeaturesProvider;

public class LibraryEStructuralFeaturesAsStringsProvider extends
		FeaturesProvider {

	@Override
	protected void buildMap(EClassToEStructuralFeatureMap map) {
		super.buildMap(map);
		map.mapTo(LIBRARY, LIBRARY__NAME, ADDRESSABLE__ADDRESS);
	}

	@Override
	protected void buildStringMap(
			EClassToEStructuralFeatureAsStringsMap stringMap) {
		super.buildStringMap(stringMap);
		stringMap.mapTo(PERSON.getInstanceClassName(), "firstName", "lastName",
				"address");
		stringMap.mapTo(WRITER.getInstanceClassName(), "firstName", "lastName",
				"books");

	}
}
]


section2:FeaturesColumnProvider[Features Column Provider]

codeRef[it.rcpvision.emf.components.ui.provider.FeaturesColumnProvider]

section2:FormPropertyDescriptionProvider[Form Property Description Provider]

codeRef[it.rcpvision.emf.components.ui.provider.FormPropertyDescriptionProvider]

ul[
	item[ref:PropertyDescriptionProvider[PropertyDescriptionProvider]]
]

section2:PropertyDescriptionProvider[Property Description Provider]

codeRef[it.rcpvision.emf.components.ui.provider.PropertyDescriptionProvider]

section2:TableColumnLabelProvider[Table Column Label Provider]

codeRef[it.rcpvision.emf.components.ui.provider.TableColumnLabelProvider]

section2:ViewerLabelProvider[Viewer Label Provider]

codeRef[it.rcpvision.emf.components.ui.provider.ViewerLabelProvider]

section2:AdapterMapCellLabelProvider[Adapter Map Cell Label Provider (?)]

codeRef[it.rcpvision.emf.components.ui.provider.AdapterMapCellLabelProvider]

section2:ViewerContentProvider[Viewer Content Provider]

codeRef[it.rcpvision.emf.components.edit.ui.provider.ViewerContentProvider]

section2:ViewerContextMenuFactory[Viewer Context Menu Factory]

codeRef[it.rcpvision.emf.components.menus.ViewerContextMenuFactory]



section:SelectionAndMenu[Selection And Menu]

section2:EmfActionBarContributor[Emf Action Bar Contributor]

codeRef[it.rcpvision.emf.components.editors.EmfActionBarContributor]

section2:EmfSelectionHelper[Emf Selection Helper]

codeRef[it.rcpvision.emf.components.util.EmfSelectionHelper]


section:Builders[Builders]

section2:TableViewerBuilder[Table Viewer Builder]

codeRef[it.rcpvision.emf.components.builders.TableViewerBuilder]

ul[
	item[ref:TableViewerColumnBuilder[TableViewerColumnBuilder]]
	item[ref:ViewerInitializer[ViewerInitializer]]
]

section2:TableViewerColumnBuilder[Table Viewer Column Builder]

codeRef[it.rcpvision.emf.components.builders.TableViewerColumnBuilder]

ul[
	item[ref:JfaceProviderFactory[JfaceProviderFactory]]
	item[ref:PropertyDescriptionProvider[PropertyDescriptionProvider]]
	item[ref:FeaturesProvider[FeaturesProvider]]
]

section3:TableViewerEditableColumnBuilder[Table Viewer Editable Column Builder]

codeRef[it.rcpvision.emf.components.builders.TableViewerEditableColumnBuilder]



section:Factories[Factories]

section2:EmfActionFactory[Emf Action Factory]

codeRef[it.rcpvision.emf.components.factories.EmfActionFactory]

section2:FormFactory[Form Factory]

codeRef[it.rcpvision.emf.components.factories.FormFactory]

ul[
	item[ref:FormPropertyDescriptionProvider[FormPropertyDescriptionProvider]]
	item[ref:FormFeatureControlFactory[FormFeatureControlFactory]]
	item[ref:EditingDomainFinder[EditingDomainFinder]]
	item[ref:JfaceProviderFactory[JfaceProviderFactory]]
	item[ref:FeaturesProvider[FeaturesProvider]]
]

section2:JfaceProviderFactory[Jface Provider Factory]

codeRef[it.rcpvision.emf.components.factories.ColumnLabelProviderFactory]

ul[
	item[ref:ViewerLabelProvider[ViewerLabelProvider]]
	item[ref:TableColumnLabelProvider[TableColumnLabelProvider]]
]


section2:FormFeatureControlFactory[Form Feature Control Factory]

codeRef[it.rcpvision.emf.components.binding.FormControlFactory]

ul[
	item[ref:JfaceProviderFactory[JfaceProviderFactory]]
]

section2:TreeFormFactory[Tree Form Factory]

codeRef[it.rcpvision.emf.components.factories.TreeFormFactory]

ul[
	item[ref:ViewerInitializer[ViewerInitializer]]
	item[ref:FormFactory[FormFactory]]
]

section2:ViewerFactory[Viewer Factory]

codeRef[it.rcpvision.emf.components.factories.ViewerFactory]

ul[
	item[ref:TableViewerBuilder[TableViewerBuilder]
	ul[
		item[ref:TableViewerColumnBuilder[TableViewerColumnBuilder]
		ul[
			item[ref:JfaceProviderFactory[JfaceProviderFactory]]
			item[ref:PropertyDescriptionProvider[PropertyDescriptionProvider]]
			item[ref:FeaturesProvider[FeaturesProvider]]
		]]
	]]
	item[ref:ViewerInitializer[ViewerInitializer]
	ul[
		item[ref:EditingDomainResourceLoader[EditingDomainResourceLoader]
		ul[
			item[ref:ResourceLoader[ResourceLoader]
			ul[
				item[ref:EmptyResourceInitializer[EmptyResourceInitializer]]
			]]
			item[ref:EmptyResourceInitializer[EmptyResourceInitializer]]
			item[ref:FeaturesProvider[FeaturesProvider]]
		]]
		item[ref:JfaceProviderFactory[JfaceProviderFactory]
		ul[
			item[ref:ViewerLabelProvider[ViewerLabelProvider]]
			item[ref:TableColumnLabelProvider[TableColumnLabelProvider]]
		]]	
		item[ref:ViewerContextMenuFactory[ViewerContextMenuFactory]]
	]]
]

section:Viewers[Viewers]

section2:ViewerInitializer[Viewer Initializer]

codeRef[it.rcpvision.emf.components.viewers.ViewerInitializer]

ul[
	item[ref:EditingDomainResourceLoader[EditingDomainResourceLoader]
	ul[
		item[ref:ResourceLoader[ResourceLoader]
		ul[
			item[ref:EmptyResourceInitializer[EmptyResourceInitializer]]
		]]
		item[ref:EmptyResourceInitializer[EmptyResourceInitializer]]
		item[ref:FeaturesProvider[FeaturesProvider]]
	]]
	item[ref:JfaceProviderFactory[JfaceProviderFactory]
	ul[
		item[ref:ViewerLabelProvider[ViewerLabelProvider]]
		item[ref:TableColumnLabelProvider[TableColumnLabelProvider]]
	]]	
	item[ref:ViewerContextMenuFactory[ViewerContextMenuFactory]]
]
