chapter:Customization[Customization]

section:ResourceManagers[Managing Resources]

section2:ResourceSaveValidation[Resource saving and validation]

Resource saving is delegated to codeRef[it.rcpvision.emf.components.edit.ResourceSaveManager]
which, by defaults only saves the passed codeRef[org.eclipse.emf.ecore.resource.Resource].
You can inject your own save manager and implement the method code[precondition(Resource)], for
instance, you may want to validate the resource before saving, and in case the validation
fails to return code[false].  If the precondition is code[false] the default implementation
will not save the resource (and in turn will return code[false]).

We provide an example of custom resource save manager: codeRef[it.rcpvision.emf.components.edit.ValidateResourceSaveManager],
we show here only relevant parts to give an example:

code[Java][
public class ValidateResourceSaveManager extends ResourceSaveManager {

	@Override
	protected boolean precondition(Resource resource) {
		return super.precondition(resource) && validateModel(resource);
	}

	protected boolean validateModel(Resource resource) {
		for (EObject eObject : resource.getContents()) {
			Diagnostic diagnostic = Diagnostician.INSTANCE.validate(eObject);
			if (diagnostic.getSeverity() == Diagnostic.ERROR) {
				// SKIPPED: present the errors
				return false;
			} else if (diagnostic.getSeverity() == Diagnostic.WARNING) {
				// SKIPPED: present the warnings
			}
		}
		return true;
	}
}
]

section:Providers[Providers]

section2[EClass' EStructuralFeatures]

When the framework builds components according to the
codeRef[org.eclipse.emf.ecore.EStructuralFeature]s of a given
codeRef[org.eclipse.emf.ecore.EClass] it relies on an injected
codeRef[it.rcpvision.emf.components.ui.provider.EStructuralFeaturesProvider].
The default behavior is to simply return all the features of the a given EClass,
in the order they are defined in the EClass;
you may want to provide a custom implementation by redefining
the method code[List<EStructuralFeature> getFeatures(EClass)], or
code[List<EStructuralFeature> getFeatures(EObject)],
for instance by returning the features ordered according to their name
(the following snippet uses an utility class from the framework)

code[Java][
public class OrderedEStructuralFeaturesProvider 
	extends EStructuralFeaturesProvider {

	@Inject
	EStructuralFeatureNameComparator comparator;
	
	@Override
	public List<EStructuralFeature> getFeatures(EClass eClass) {
		List<EStructuralFeature> features = super.getFeatures(eClass);
		Collections.sort(features, 
			new EStructuralFeatureNameComparator());
		return features;
	}
}
]

Alternatively, you can set the mappings, i.e., specify the structural
features you want to be used given an EClass, by implementing
the method code[buildMap], which receives the
codeRef[it.rcpvision.emf.components.ui.provider.EStructuralFeaturesProvider$EClassToEStructuralFeatureMap]
that can be filled with the method code[mapTo]; 
for instance, using the EMF extended library
example, this customization will return only the e[name] and e[address] features
for code[Library], the e[firstName], e[lastName] and e[address] for
code[Person], and the e[firstName], e[lastName] and e[books] (but
not e[address]) for code[Writer] (which inherits from code[Person]).

code[Java][
import static org.eclipse.emf.examples.extlibrary.EXTLibraryPackage.Literals.*;
import it.rcpvision.emf.components.ui.provider.EStructuralFeaturesProvider;

public class LibraryEStructuralFeaturesProvider extends
		EStructuralFeaturesProvider {

	@Override
	protected void buildMap(EClassToEStructuralFeatureMap map) {
		super.buildMap(map);
		map.mapTo(LIBRARY,
				LIBRARY__NAME, ADDRESSABLE__ADDRESS);
		map.mapTo(PERSON,
				PERSON__FIRST_NAME, PERSON__LAST_NAME,
				ADDRESSABLE__ADDRESS);
		map.mapTo(WRITER,
				PERSON__FIRST_NAME, PERSON__LAST_NAME,
				WRITER__BOOKS);
	}
}
]