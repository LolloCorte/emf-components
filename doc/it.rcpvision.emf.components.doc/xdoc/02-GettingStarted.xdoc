chapter:GettingStarted[Getting Started]

To get started, you should first download "Eclipse Modeling Tools" from link[http://www.eclipse.org/downloads/][Eclipse
Downloads]
img[images/eclipseModelingTools.png][][ ][]
This will ensure you have EMF and related Tools installed and ready to go.


section:Installation[Installation]

Now select "Help" -> "Install New Software..." and in the "Work with:" field insert the EMF Components update
site link[http://www.rcp-vision.com/emf-components/updates/][http://www.rcp-vision.com/emf-components/updates/]
and install all features.

img[images/emf-components-update-site.png][][ ][]


section:FirstExample[First Example]

The purpose of this first example is to make use of the classical EMF Library Model example and manage
it from an EMF Components enabled plug-in.

So let's start by creating the model plug-in with 
ol[
	item[File -> New... -> Example...]
	item[from Category "Eclipse Modeling Framework", select "Extended Library Model Example"]
	item[press Next and Finish]
]

You will end up
with three plug-ins: 
ul[
item[org.eclipse.emf.examples.library (the model plug-in)]
item[org.eclipse.emf.examples.library.edit (the edit plug-in)]
item[org.eclipse.emf.examples.library.editor (the editor plug-in)]
]
Now you can create your first example with the appropriate wizard.

ol[
	item[select "File" -> "New" -> "Project..."]
	item[then, under the category "Emf Components" select "Emf Components Dsl based Project"]
	item[and click "Next"]
	item[give a name to the project (e.g. "org.eclipse.emf.examples.library.firstexample")]
	item[and then click on "Finish"]
]
 
The generated project has some classes and a e[module.emfcomponents] file, which you will quickly learn to manage.
Let's start by adding a e[Dependency] from the model plug-in: so open e[MANIFEST.MF] file, go to e[Dependencies]
tab, press e["Add..."] button in e["Required Plug-ins"] section and insert e["org.eclipse.emf.examples.library"]
among dependencies.
 
Let's create a e["View"] in the usual Eclipse RCP way (except for one thing):
ol[
	item[open e["MANIFEST.MF"] file]
	item[go to e["Extensions"] tab]
	item[click e["Add..."] button]
	item[select e["org.eclipse.ui.views"] extension and click e["Finish"]]
	item[right-click e["org.eclipse.ui.views"] extension and select e["New"-> category]]
	item[give the category a e["name"], e.g. e["Library"]]
	item[right-click e["org.eclipse.ui.views"] extension and select e["New"-> view]]
	item[give the view a e["name"], e.g. e["Authors"]]
	item[set the e["category"] to the value defined above, 
		e.g. e["org.eclipse.emf.examples.library.firstexample.category1"]]
	item[click on e["class"] hyperlink]
	item[set the e["Package"] for the new class, e.g. e["org.eclipse.emf.examples.library.firstexample.views"]]
	item[give a e["Name"] to the new class, e.g. e["AuthorsView"]]
	item[and click e["Finish"]]
	item[now modify the e["class"] field adding the prefix 
		code["org.eclipse.emf.examples.library.firstexample.FirstexampleExecutableExtensionFactory:"]
		so to obtain the following the e["class"]
		code["org.eclipse.emf.examples.library.firstexample.FirstexampleExecutableExtensionFactory:org.eclipse.emf.examples.library.firstexample.views.AuthorsView"]
		]
]

It's important to notice carefully the last step: in practice, instead of setting the View qualified name
as usual, we are asking a e[factory] to do this. The character ':' separates the qualified names of the
factory and the view respectively.
The factory that has to be used is one of the classes that the wizard generated at first; just check
for a class with pattern e["*ExecutableExtensioFactory"].

Now modify the View source code in this way:

code[Java][
package org.eclipse.emf.examples.library.firstexample.views;

import it.rcpvision.emf.components.views.AbstractSaveableTableView;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.examples.extlibrary.EXTLibraryPackage;
import org.eclipse.emf.examples.extlibrary.Library;

public class AuthorsView extends AbstractSaveableTableView {

	public static final String ID = "org.eclipse.emf.examples.library.firstexample.view1";

	@Override
	protected URI createResourceURI() {
		return URI.createFileURI(System.getProperty("user.home")
				+ "/examples/library/LibraryA.library");
	}

	@Override
	protected Object getContents(Resource resource) {
		Library library = (Library) resource.getContents().get(0);
		return library.getWriters();
	}

	@Override
	protected EClass getEClass() {
		return EXTLibraryPackage.Literals.WRITER;
	}

}
]

This example is intended to show the EMF Components basics with the minimum amount of code.

Our goal is to show the writers list of a library object which has been persisted on a EMF Resource.
Here are the steps:

ol[
	item[first we define the EMF URI where to load and save Resouces; in this example we choose to use
	the EMF default persistence (XMI), but here you can provide any URI (e.g. using Teneo, CDO or any other EMF Resource Persistence implementation)]
	item[then we specify how to extract, from the Resource, the objects we want to show]
	item[finally we declare the EClass that represent the single item in the list]
]

Before executing this code we need to do some more work.

First of all we have to ensure that the path specified in the first step exists. So you may have to create
the folders 

code[<user.home>/examples/library]

More important however is the fact that the Resource has never been initialized yet.
An easy way to overcome this issue can be the following:

ol[
	item[open the class *GuiceModule (FirstexampleGuiceModule in this example). Note that this is a key	class for all customizations; it allows to override several methods in order to provide custom behaviours
	and implementations.]
	item[override method e[bindEmptyResourceInitializer()] providing a class for Resource initialization
		code[Java][
			@Override
			public Class<? extends EmptyResourceInitializer> bindEmptyResourceInitializer() {
				return LibraryEmptyResourceInitializer.class;
			}
		]
	]
	item[create a new class e[LibraryEmptyResourceInitializer] for Resource initialization
		code[Java][
			package org.eclipse.emf.examples.library.firstexample;
			
			import java.io.IOException;
			
			import it.rcpvision.emf.components.resource.EmptyResourceInitializer;
			
			import org.eclipse.emf.ecore.resource.Resource;
			import org.eclipse.emf.examples.extlibrary.EXTLibraryFactory;
			import org.eclipse.emf.examples.extlibrary.Library;
			import org.eclipse.emf.examples.extlibrary.Writer;
			
			public class LibraryEmptyResourceInitializer  extends EmptyResourceInitializer {
				
				@Override
				public void initialize(Resource resource) {
					super.initialize(resource);
			
					Library library = EXTLibraryFactory.eINSTANCE.createLibrary();
					library.getWriters().add(createWriter("Ed", "Merks"));
					library.getWriters().add(createWriter("Eike", "Stepper"));
					library.getWriters().add(createWriter("Lars", "Vogel"));
					library.getWriters().add(createWriter("Tom", "Schindl"));
					library.getWriters().add(createWriter("Ralf", "Sternberg"));
					resource.getContents().add(library);
					
					try {
						resource.save(null);
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			
				protected Writer createWriter(String firstName, String lastName) {
					Writer writer = EXTLibraryFactory.eINSTANCE.createWriter();
					writer.setFirstName(firstName);
					writer.setLastName(lastName);
					return writer;
				}
			
			}
		]
		The method e[initialize()] will be executed just the first time, when the Resource is not present.
		The method ends with a call to e[save()], so that the Resource is persisted. Notice that this
		call can be omitted if you want to start every time from scratch without persisting.
	]
]

now get back to the e[MANIFEST.MF] and run the example
img[images/first-example-launch.png][][ ][]

As an Eclipse RCP developer you know, of course, that this will start another Eclipse instance, unless
you add an Application plug-in to the launch or define an Application in the current plug-in. 

In this second Eclipse instance you can show the View in this way:
ol[
	item[e[Window -> Show View -> Other...]]
	item[from Category "Library", select "Authors"]
	item[press e[OK]]
]

img[images/first-example-run.png][][ ][]


section:RCPMail[RCP Mail Example]

