chapter:GettingStarted[Getting Started]

To get started, you should first download "Eclipse Modeling Tools" from link[http://www.eclipse.org/downloads/][Eclipse
Downloads]
img[images/eclipseModelingTools.png][][ ][]
This will ensure you have EMF and related Tools installed and ready to go.


section:Installation[Installation]

Now select "Help" -> "Install New Software..." and in the "Work with:" field insert the EMF Components update
site link[http://www.rcp-vision.com/emf-components/updates/][http://www.rcp-vision.com/emf-components/updates/]
and install all features.

img[images/emf-components-update-site.png][][ ][]


section:FirstExample[First Example]

The purpose of this first example is to make use of the classical EMF Library Model example and manage
it from an EMF Components enabled plug-in.

So let's start by creating the model plug-in with 
ol[
	item[File -> New... -> Example...]
	item[from Category "Eclipse Modeling Framework", select "Extended Library Model Example"]
	item[press Next and Finish]
]

You will end up with three plug-ins: 
ul[
item[org.eclipse.emf.examples.library (the model plug-in)]
item[org.eclipse.emf.examples.library.edit (the edit plug-in)]
item[org.eclipse.emf.examples.library.editor (the editor plug-in)]
]

Now you can create your first example with the appropriate wizard.

ol[
	item[select "File" -> "New" -> "Project..."]
	item[from the "Emf Components" category select "Emf Components Dsl based Project"]
	item[click "Next"]
	item[give a name to the project (e.g. "it.rcpvision.emf.components.firstexample")]
	item[click "Finish"]
]
 
The generated project has some classes and a e[module.emfcomponents] file, which opens automatically.
Just type the following content into the {} block (note that context assist is available)

code[
	parts{ 
		viewpart it.rcpvision.emf.components.firstexample.view.library.treeform {
			viewname "My Library Tree Form"
			viewclass 
		}
	}
]

Here above we have just declared a view part with
 
ol[
	item[id e["it.rcpvision.emf.components.firstexample.view.library.treeform"]]
	item[name e["Library Tree Form"]]
	item[class: not yet set, we are going to create
		 e["it.rcpvision.emf.components.firstexample.views.LibraryTreeFormView"]]
]

So there is still an error, in fact we need to create the declared class. 
e[Suggestion:] Just copy the above qualified class name (e["it.rcpvision.emf.components.firstexample.views.LibraryTreeFormView"]), 
select the project, right-click and select File -> New -> Class. Now paste the clipboard content into e["Name:"] field: the
package and class name will be automatically splitted into right fields. Then click e["Finish"].

Now modify the view class code with this content:

code[Java][
import it.rcpvision.emf.components.views.AbstractSaveableTreeFormView;
import org.eclipse.emf.common.util.URI;

public class LibraryTreeFormView extends AbstractSaveableTreeFormView {

	@Override
	protected URI createResourceURI() {
		return URI.createFileURI( System.getProperty("user.home") + "/MyLibrary.library" );
	}

}
]

then get back to e[module.emfcomponents] file, go just after viewclass keyword, type e["LibraryTreeFormView"]
and e[Ctrl-Space]: the content assist will set automatically the correct qualified name
code[
	viewclass viewclass it.rcpvision.emf.components.firstexample.views.LibraryTreeFormView
]

when you save the above file you will notice that a new file (e["plugin.xml.emfcomponents_gen"]) 
is generated into e["emfcomponents-gen"] source folder. Just copy this file into the project root and
rename it to e["plugin.xml"].

Let's focus briefly on the above e[createResourceURI()] method: our goal is allowing to manage 
a library model instance which persists on a EMF Resource.
In this example we choose to use the EMF default persistence (XMI), but you can provide any URI 
(e.g. using Teneo, CDO or any other EMF Resource Persistence implementation)
In particular here we choose to persist the Resource in a XMI file named e["MyLibrary.library"] into the user home
folder (you might want to change it with any other path). 

We need a e[Dependency] from the model plug-in: so open e[MANIFEST.MF] file, go to e[Dependencies]
tab, press e["Add..."] button in e["Required Plug-ins"] section and insert e["org.eclipse.emf.examples.library"]
among dependencies.

Before executing this code we need to do some little more work in order to initialize the Resource.

An easy way to overcome this issue can be the following:

ol[
	item[open the class *GuiceModule (FirstexampleGuiceModule in thris example). Note that this is a key	class for all customizations; it allows to override several methods in order to provide custom behaviours
	and implementations.]
	item[override method e[bindEmptyResourceInitializer()] providing a class for Resource initialization
		code[Java][
			@Override
			public Class<? extends EmptyResourceInitializer> bindEmptyResourceInitializer() {
				return LibraryEmptyResourceInitializer.class;
			}
		]
	]
	item[create a new class e[LibraryEmptyResourceInitializer] extending from e[EmptyResourceInitializer] for Resource initialization
		code[Java][
			import it.rcpvision.emf.components.resource.EmptyResourceInitializer;
			import org.eclipse.emf.ecore.resource.Resource;
			import org.eclipse.emf.examples.extlibrary.EXTLibraryFactory;
			import org.eclipse.emf.examples.extlibrary.Library;
			
			public class LibraryEmptyResourceInitializer  extends EmptyResourceInitializer { 
			    
			   @Override 
			   public void initialize(Resource resource) { 
			       super.initialize(resource); 
			       Library library = EXTLibraryFactory.eINSTANCE.createLibrary(); 
			       resource.getContents().add(library); 
			   } 
			
			} 
		]
		The method e[initialize()] will be executed just the first time, when the Resource is not present.
		The method ends with a call to e[save()], so that the Resource is persisted. Notice that this
		call can be omitted if you want to start every time from scratch without persisting.
	]
]

now get back to the e[MANIFEST.MF] and run the example
img[images/first-example-launch.png][][ ][]

As an Eclipse RCP developer you know, of course, that this will start another Eclipse instance, unless
you add an Application plug-in to the launch or define an Application in the current plug-in. 

In this second Eclipse instance you can show the View in this way:
ol[
	item[e[Window -> Show View -> Other...]]
	item[from Category "Emf Components", select "My Library Tree Form"]
	item[press e[OK]]
]

img[images/first-example-run.png][][ ][]


section:RCPMail[RCP Mail Example]

